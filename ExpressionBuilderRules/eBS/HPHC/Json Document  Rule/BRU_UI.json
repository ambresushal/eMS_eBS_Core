{
  "documentrule": {
    "targetelement": "CommercialMedicalAnchor[BenefitReview.BenefitReviewGrid]",
    "ruletype": "datasource",
    "targetelementtype": "field",
    "ruleconditions": {
      "sources": [
       
        {
          "sourcename": "A",
          "sourceelement": "CommercialMedicalAnchor[GeneralCostShare.Deductible.DeductibleList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "B",
          "sourceelement": "CommercialMedicalAnchor[CascadingCostShare.CostShareGroup.CostShareGroupList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        }
		,
		{
          "sourcename": "C",
          "sourceelement": "CommercialMedicalAnchor[AdditionalServices.AdditionalServiceList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "D",
          "sourceelement": "CommercialMedicalAnchor[StandardServices.StandardServiceList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "E",
          "sourceelement": "CommercialMedicalAnchor[Network.NetworkTierList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "F",
          "sourceelement": "CommercialMedicalAnchor[BenefitReview.BenefitReviewGrid]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "G",
          "sourceelement": "CommercialMedicalAnchor[GeneralCostShare.OutofPocketMaximum.OutofPocketMaximumList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
{
          "sourcename": "H",
          "sourceelement": "CommercialMedicalAnchor[Network.CoverageLevelList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },	
      {
          "sourcename": "I",
          "sourceelement": "CommercialMedicalAnchor[StandardServices.ServiceGroup]]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },	
		{
          "sourcename": "J",
          "sourceelement": "StandardServices[StandardServiceGroupDetailRules.StandardServiceGroupDetailRuleList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },	
		{
          "sourcename": "K",
          "sourceelement": "CommercialMedicalAnchor[Limits.LimitsInformation.LimitInformationDetail]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "L",
          "sourceelement": "CommercialMedicalAnchor[StandardServices.SpecialServiceList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        },
		{
          "sourcename": "M",
          "sourceelement": "StandardServices[SpecialServiceDetails.SpecialServiceGroupDetailRulesList]",
          "sourceelementtype": "repeater",
          "filter": {
            "filterlist": [],
            "filtermergetype": "none",
            "filtermergeexpression": "",
            "keycolumns": ""
          }
        }		
      ],
      "sourcemergelist": {
        "outputcolumns": {
          "columns": "",
          "children": ""
        },
        "sourcemergeactions": [
          {
            "sourcemergetype": "script",
            "sourcemergeexpression": "SET(StandardServicesAnchor, d);SET(CountStandardServicesAnchor, COUNT(StandardServicesAnchor));IF(CountStandardServicesAnchor > 0){SET(ServiceGroup, i); SET(NetworkTierCount, \"\"); SET(servicesWithManualOverride, \"\"); SET(NetworkTierCount, COUNT(e)); SET(limitDetails, k); SETDEFAULTROW(target, \"{'BenefitServiceCode':'','BenefitCategory1':'','BenefitCategory2':'','BenefitCategory3':'','PlaceofService':'','CostShareGroup':'','ManualOverride':'No','NetworkTier':'','NetworkName':'','Covered':'','Copay':'','CopayFrequency':'','Coinsurance':'','IndDeductible':'','FamDeductible':'','IndOOPM':'','TwoPersonOOPM':'','FamilyOOPM':'','PriorApproval':'','Referral':'','ReductionofBenefits':'','SameAsNetworkTier':'','SameAsCostShare':'','TwoPersonDeductible':'','CopayType':'','DependentOutofAreaCoverage':'','StudentDependentOOACovered':'','PrimaryPayer':'','PrimaryDenied':'','PrimaryPaid':'','ApplyFromNetworkLevel':'','ApplyFromNetworkType':'','ApplyTowardBenefitMaximum':'','BenefitSpecificDeductibleIndicator':'','CostShareType':'','CopaySupplement':''}\"); IF(NetworkTierCount > 0){SET(deductibleCostShare, a); SET(FinalBRG, \"\"); SET(BRG, \"\"); SET(oopmCostShare, g); SET(costShareGroupList, b); SET(costShareGrorupsetBlank, \"\"); IF(COUNT(f)==0){SET(f, CREATETOKEN(\"{'BenefitServiceCode':'','BenefitCategory1':'','BenefitCategory2':'','BenefitCategory3':'','PlaceofService':'','ManualOverride':'No','CostShareGroup':'','NetworkTier':'','NetworkName':'','Covered':'','Copay':'','CopayFrequency':'','Coinsurance':'','IndDeductible':'','FamDeductible':'','IndOOPM':'','TwoPersonOOPM':'','FamilyOOPM':'','PriorApproval':'','Referral':'','ReductionofBenefits':'','SameAsNetworkTier':'','SameAsCostShare':'','TwoPersonDeductible':'','CopayType':'','DependentOutofAreaCoverage':'','StudentDependentOOACovered':'','PrimaryPayer':'','PrimaryDenied':'','PrimaryPaid':'','ApplyFromNetworkLevel':'','ApplyFromNetworkType':'','ApplyTowardBenefitMaximum':'','BenefitSpecificDeductibleIndicator':'','CostShareType':'','CopaySupplement':''}\"));}SET(AdditionalServices, \"\"); SET(serviceCheckAdditionalServices, \"\"); SET(StandardServices, \"\"); SET(NetworkTierCount, \"\"); SET(NetworkTierCount, COUNT(e)); SET(NetWorkCounter, 0); SET(serviceNetworkAppend, \"\"); SET(AdditionalServicesAppend, \"\"); SET(StandardServicesAppend, \"\"); SET(CurrentBRG, f); SET(AdditionalServicesList, FILTERLIST(c, \"SelectService=[Yes]\", \"\", \"\", \"\")); SET(ManualDefaultPropToMerge, \"{'ManualOverride':'Yes'}\"); SET(propertyToMerge, CREATETOKEN(ManualDefaultPropToMerge)); SET(AdditionalServicesList, CROSSJOIN(AdditionalServicesList, propertyToMerge)); SET(sgFilterCondition, \"ServiceGroup=[value]\"); SET(sgFilterCondition, REPLACE(sgFilterCondition, \"value\", i)); SET(StandardServicesList, FILTERLIST(j, sgFilterCondition, \"\", \"\", \"\")); SET(CostShareGroupFilter, FILTERLIST(StandardServicesAnchor, \"\", \"\", \"\", \"BenefitServiceCode,CostShareGroup\")); SET(CostShareGroupFilter, MERGEARRAY(CostShareGroupFilter, StandardServicesList, \"BenefitServiceCode\")); SET(StandardServicesList, CostShareGroupFilter); SET(ManualDefaultPropToMerge, \"{'ManualOverride':'No'}\"); SET(propertyToMerge, CREATETOKEN(ManualDefaultPropToMerge)); SET(StandardServicesList, CROSSJOIN(StandardServicesList, propertyToMerge)); SET(StdSerAddSerList, UNION(StandardServicesList, AdditionalServicesList, \"BenefitServiceCode\")); SET(specialServices, l); IF(COUNT(l) > 0){SET(specialServicesML, FILTERLIST(m, sgFilterCondition, \"\", \"\", \"BenefitCategory1,BenefitCategory2,BenefitCategory3,PlaceofService,CostShareGroup,BenefitServiceCode,PriorApproval,Referral\"));SET(specialServicesCostShareGroupFilter, FILTERLIST(specialServices, \"\", \"\", \"\", \"BenefitServiceCode,CostShareGroup\")); SET(specialServices, MERGEARRAY(specialServicesCostShareGroupFilter,specialServicesML, \"BenefitServiceCode\")); SET(StdSerAddSerList, UNION(StandardServicesList, specialServices, \"BenefitServiceCode\"));}SET(StdSerAddSerNetworkList, \"\"); WHILE(NetWorkCounter < NetworkTierCount){SET(networkTierFilterListResult, FILTERLIST(e, NetWorkCounter, \"\", \"\", \"\")); SET(networkTierValue, GETVAL(networkTierFilterListResult, \"NetworkTier\")); SET(networkNameValue, GETVAL(networkTierFilterListResult, \"NetworkName\")); SET(defaultPropToMerge, \"{'NetworkTier':'gp','NetworkName':'Value1','Covered':'Yes','Copay':'','ManualOverride':'No','Coinsurance':'','IndDeductible':'','FamDeductible':'','IndOOPM':'','TwoPersonOOPM':'','FamilyOOPM':'','ReductionofBenefits':'','CopayFrequency':'','SameAsNetworkTier':'','SameAsCostShare':'','TwoPersonDeductible':'','CopayType':'','DependentOutofAreaCoverage':'','StudentDependentOOACovered':'','PrimaryPayer':'','PrimaryDenied':'','PrimaryPaid':'','ApplyFromNetworkLevel':'','ApplyFromNetworkType':'','ApplyTowardBenefitMaximum':'','BenefitSpecificDeductibleIndicator':'','CostShareType':'' ,'CopaySupplement':''}\"); SET(addServicesPropToMerge, \"{'NetworkTier':'gp','NetworkName':'Value1','Covered':'Yes','Copay':'','ManualOverride':'Yes','Coinsurance':'','IndDeductible':'','FamDeductible':'','IndOOPM':'','TwoPersonOOPM':'','FamilyOOPM':'','ReductionofBenefits':'','CostShareGroup':'','CopayFrequency':'','SameAsNetworkTier':'','SameAsCostShare':'','TwoPersonDeductible':'','CopayType':'','DependentOutofAreaCoverage':'','StudentDependentOOACovered':'','PrimaryPayer':'','PrimaryDenied':'','PrimaryPaid':'','ApplyFromNetworkLevel':'','ApplyFromNetworkType':'','ApplyTowardBenefitMaximum':'','BenefitSpecificDeductibleIndicator':'','CostShareType':'' ,'CopaySupplement':''}\"); SET(defaultPropToMerge, REPLACE(defaultPropToMerge, \"gp\", networkTierValue)); SET(defaultPropToMerge, REPLACE(defaultPropToMerge, \"Value1\", networkNameValue)); SET(addServicesPropToMerge, REPLACE(addServicesPropToMerge, \"gp\", networkTierValue)); SET(addServicesPropToMerge, REPLACE(addServicesPropToMerge, \"Value1\", networkNameValue)); SET(propertyToMerge, CREATETOKEN(defaultPropToMerge)); SET(addPropToMerge, CREATETOKEN(addServicesPropToMerge)); SET(serviceadditioncondition, \"SelectService=[Yes]\"); SET(serviceCheckAdditionalServices, FILTERLIST(c, serviceadditioncondition, \"\", \"\", \"\")); IF(COUNT(serviceCheckAdditionalServices) > 0){SET(AdditionalServices, CROSSJOIN(serviceCheckAdditionalServices, addPropToMerge))}SET(sgFilterCondition, \"ServiceGroup=[value]\"); SET(sgFilterCondition, REPLACE(sgFilterCondition, \"value\", i)); SET(StandardServices, d); SET(StandardServices, FILTERLIST(j, sgFilterCondition, \"\", \"\", \"BenefitCategory1,BenefitCategory2,BenefitCategory3,PlaceofService,CostShareGroup,CopayFrequency,BenefitServiceCode,PriorApproval,Referral\")); SET(StandardServices, CROSSJOIN(StandardServices, propertyToMerge)) SET(specialServicesCrossjoin, \"\"); IF(COUNT(l) > 0){SET(specialServicesCrossjoin, CROSSJOIN(specialServices, propertyToMerge)); SET(StandardServices, UNION(StandardServices, specialServicesCrossjoin, \"BenefitServiceCode,NetworkTier\"))}APPEND(AdditionalServicesAppend, AdditionalServices); APPEND(StandardServicesAppend, StandardServices); SET(NetworkNameCondation, \"NetworkTier=[<0>]\"); SET(NetworkNameCondation, REPLACE(NetworkNameCondation, \"<0>\", networkTierValue)); SET(NetworkNameToken, \"{'NetworkName':'<0>'}\"); SET(NetworkNameToken, REPLACE(NetworkNameToken, \"<0>\", networkNameValue)); SET(CurrentBRG, UPDATEARRAY(CurrentBRG, NetworkNameCondation, NetworkNameToken)); SET(addServicesPropToMerge, \"{'NetworkTier':'gp','NetworkName':'Value1'}\"); SET(addServicesPropToMerge, REPLACE(addServicesPropToMerge, \"gp\", networkTierValue)); SET(addServicesPropToMerge, REPLACE(addServicesPropToMerge, \"Value1\", networkNameValue)); SET(propertyToMerge, CREATETOKEN(addServicesPropToMerge)); IF(EQUALS(StdSerAddSerNetworkList, \"\")==TRUE()){SET(StdSerAddSerNetworkList, CROSSJOIN(StdSerAddSerList, propertyToMerge))}ELSE{SET(TempList, CROSSJOIN(StdSerAddSerList, propertyToMerge)); SET(StdSerAddSerNetworkList, UNION(StdSerAddSerNetworkList, TempList, \"BenefitServiceCode,NetworkTier\"))}SET(NetWorkCounter, NetWorkCounter + 1)}SET(serviceadditioncondition, \"SelectService=[Yes]\"); SET(serviceCheckAdditionalServices, FILTERLIST(c, serviceadditioncondition, \"\", \"\", \"\")); IF(COUNT(serviceCheckAdditionalServices) > 0){SET(AdditionalServicesAppend, REPLACE(AdditionalServicesAppend, \"][\", \",\")); SET(AdditionalServicesAppend, REPLACE(AdditionalServicesAppend, \"[\", \"\")); SET(AdditionalServicesAppend, REPLACE(AdditionalServicesAppend, \"]\", \"\")); SET(value1, \"[\"); SET(value1, APPEND(value1, AdditionalServicesAppend)); SET(value1, APPEND(value1, \"]\")); SET(AdditionalServicesAppend, CREATETOKEN(value1))}SET(StandardServicesAppend, REPLACE(StandardServicesAppend, \"][\", \",\")); SET(StandardServicesAppend, REPLACE(StandardServicesAppend, \"[\", \"\")); SET(StandardServicesAppend, REPLACE(StandardServicesAppend, \"]\", \"\")); SET(value2, \"[\"); SET(value2, APPEND(value2, StandardServicesAppend)); SET(value2, APPEND(value2, \"]\")); SET(StandardServicesAppend, CREATETOKEN(value2)); SET(BRG, UNION(StandardServicesAppend, AdditionalServicesAppend, \"BenefitServiceCode,NetworkTier\")); IF(COUNT(BRG) > 0){SET(ServiceToRemove, EXCEPT(CurrentBRG, BRG, \"BenefitServiceCode,NetworkTier\")); SET(ServiceToKeep, EXCEPT(CurrentBRG, ServiceToRemove, \"BenefitServiceCode,NetworkTier\")); SET(BRG, EXCEPT(BRG, ServiceToKeep, \"BenefitServiceCode,NetworkTier\")); SET(FinalBRG, UNION(BRG, ServiceToKeep, \"BenefitServiceCode,NetworkTier\"))}SET(servicesWithManualOverride, FILTERLIST(FinalBRG, \"ManualOverride=[Yes]\", \"\", \"\", \"\")); SET(FinalBRG, MERGEARRAY(StdSerAddSerNetworkList, FinalBRG, \"BenefitServiceCode,NetworkTier\")); IF(COUNT(servicesWithManualOverride) > 0){SET(FinalBRG, EXCEPT(FinalBRG, servicesWithManualOverride, \"BenefitServiceCode,NetworkTier\"))}SET(NetWorkCounter, 0); WHILE(NetWorkCounter < NetworkTierCount){SET(phIndTierBlankCondition, \"NetworkTier=[<0>]&IndDeductible=[]\"); SET(phIndTierNACondition, \"NetworkTier=[<0>]&IndDeductible=[Not Applicable]\"); SET(phIndTierNCCondition, \"NetworkTier=[<0>]&IndDeductible=[Not Covered]\") SET(phFamTierBlankCondition, \"NetworkTier=[<0>]&FamDeductible=[]\"); SET(phFamTierNACondition, \"NetworkTier=[<0>]&FamDeductible=[Not Applicable]\"); SET(phFamTierNCCondition, \"NetworkTier=[<0>]&FamDeductible=[Not Covered]\"); SET(phIndOOPTierBlankCondition, \"NetworkTier=[<0>]&IndOOPM=[]\"); SET(phIndOOPTierNACondition, \"NetworkTier=[<0>]&IndOOPM=[Not Applicable]\"); SET(phIndOOPTierNCCondition, \"NetworkTier=[<0>]&IndOOPM=[Not Covered]\"); SET(phFamOOPTierBlankCondition, \"NetworkTier=[<0>]&FamilyOOPM=[]\"); SET(phFamOOPTierNACondition, \"NetworkTier=[<0>]&FamilyOOPM=[Not Applicable]\"); SET(phFamOOPTierNCCondition, \"NetworkTier=[<0>]&FamilyOOPM=[Not Covered]\"); SET(networkTierFilterListResult, FILTERLIST(e, NetWorkCounter, \"\", \"\", \"\")); SET(networkTierValue, GETVAL(networkTierFilterListResult, \"NetworkTier\")); SET(tierCondition, \"NetworkTier=[<0>]\"); SET(tierCondition, REPLACE(tierCondition, \"<0>\", networkTierValue)); SET(cvgTierCondition, tierCondition); SET(cvgTierCondition, APPEND(cvgTierCondition, \"&\")); SET(phIndTierBlankCondition, REPLACE(phIndTierBlankCondition, \"<0>\", networkTierValue)); SET(phIndTierNACondition, REPLACE(phIndTierNACondition, \"<0>\", networkTierValue)); SET(phIndTierNCCondition, REPLACE(phIndTierNCCondition, \"<0>\", networkTierValue)); SET(phFamTierBlankCondition, REPLACE(phFamTierBlankCondition, \"<0>\", networkTierValue)); SET(phFamTierNACondition, REPLACE(phFamTierNACondition, \"<0>\", networkTierValue)); SET(phFamTierNCCondition, REPLACE(phFamTierNCCondition, \"<0>\", networkTierValue)); SET(phIndOOPTierBlankCondition, REPLACE(phIndOOPTierBlankCondition, \"<0>\", networkTierValue)); SET(phIndOOPTierNACondition, REPLACE(phIndOOPTierNACondition, \"<0>\", networkTierValue)); SET(phIndOOPTierNCCondition, REPLACE(phIndOOPTierNCCondition, \"<0>\", networkTierValue)); SET(phFamOOPTierBlankCondition, REPLACE(phFamOOPTierBlankCondition, \"<0>\", networkTierValue)); SET(phFamOOPTierNACondition, REPLACE(phFamOOPTierNACondition, \"<0>\", networkTierValue)); SET(phFamOOPTierNCCondition, REPLACE(phFamOOPTierNCCondition, \"<0>\", networkTierValue)); SET(costSharegroupListFilterListCountData, FILTERLIST(costShareGroupList, tierCondition, \"\", \"\", \"\")); SET(costSharegroupCount, COUNT(costSharegroupListFilterListCountData)); SET(costsharegroupListCounter, 0); SET(costSharegroupUpdateCondition, \"\"); WHILE(costsharegroupListCounter < costSharegroupCount){SET(costSharegroupListCountData, FILTERLIST(costSharegroupListFilterListCountData, costsharegroupListCounter, \"\", \"\", \"\")); SET(costSharegroupListCostShareGroupValue, GETVAL(costSharegroupListCountData, \"CostShareGroup\")); SET(costSharegroupListNetworkTierValue, GETVAL(costSharegroupListCountData, \"NetworkTier\")); SET(costSharegroupListCopayValueValue, GETVAL(costSharegroupListCountData, \"CopayValue\")); SET(costSharegroupListCoinsValue, GETVAL(costSharegroupListCountData, \"CoinsuranceAmount\")); SET(costSharegroupListCostShareTypeValue, GETVAL(costSharegroupListCountData, \"CostShareType\")); SET(costSharegroupListtierCondition, \"CostShareGroup=[<0>]&NetworkTier=[<1>]\"); SET(costSharegroupListtierCondition, REPLACE(costSharegroupListtierCondition, \"<0>\", costSharegroupListCostShareGroupValue)); SET(costSharegroupListtierCondition, REPLACE(costSharegroupListtierCondition, \"<1>\", costSharegroupListNetworkTierValue)); SET(costSharegroupListToken, \"{'Copay':'<0>','Coinsurance':'<1>','CopayFrequency':'<2>','SameAsNetworkTier':'<3>','SameAsCostShare':'<4>','CopayType':'<5>','CostShareType':'<6>','CopaySupplement':'<7>'}\"); SET(costSharegroupListToken, REPLACE(costSharegroupListToken, \"<0>\", costSharegroupListCopayValueValue)); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListToken, \"<1>\", costSharegroupListCoinsValue)); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<2>\", GETVAL(costSharegroupListCountData, \"CopayFrequency\"))); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<3>\", GETVAL(costSharegroupListCountData, \"SameAsNetworkTier\"))); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<4>\", GETVAL(costSharegroupListCountData, \"SameAsCostShare\"))); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<5>\", GETVAL(costSharegroupListCountData, \"CopayType\"))); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<6>\", costSharegroupListCostShareTypeValue)); SET(costSharegroupListPropValCopayCoins, REPLACE(costSharegroupListPropValCopayCoins, \"<7>\", GETVAL(costSharegroupListCountData, \"CopaySupplement\"))); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListPropValCopayCoins)); SET(costsharegroupListCounter, costsharegroupListCounter + 1)}SET(deductibleFilterListCountData, FILTERLIST(deductibleCostShare, tierCondition, \"\", \"\", \"\")); SET(OOPMFilterListCountData, FILTERLIST(oopmCostShare, tierCondition, \"\", \"\", \"\")); SET(networkCoverageCount, COUNT(deductibleFilterListCountData)); SET(networkCovergareCounter, 0); SET(IndExist, \"No\"); SET(FamExist, \"No\"); SET(TwopersonExist, \"No\"); WHILE(networkCovergareCounter < networkCoverageCount){SET(deductibleCostShareFilterListResult, FILTERLIST(deductibleFilterListCountData, networkCovergareCounter, \"\", \"\", \"\")); SET(networkTierCoverageValue, GETVAL(deductibleCostShareFilterListResult, \"CoverageName\")); SET(networkTierNetworkTierValue, GETVAL(deductibleCostShareFilterListResult, \"NetworkTier\")); SET(networkTierDeductibleAmountValue, GETVAL(deductibleCostShareFilterListResult, \"DeductibleAmount\")); SET(OOPMCostShareFilterListResult, FILTERLIST(OOPMFilterListCountData, networkCovergareCounter, \"\", \"\", \"\")); SET(networkTierOOPMAmountValue, GETVAL(OOPMCostShareFilterListResult, \"OOPMAmount\")); SET(deductibleBRGTokenCondition, \"NetworkTier=[<0>]\"); SET(deductibleBRGTokenCondition, REPLACE(deductibleBRGTokenCondition, \"<0>\", networkTierNetworkTierValue)); IF(EQUALS(networkTierCoverageValue, \"Individual\")==TRUE()){SET(indDeductibleToken, \"{'IndDeductible':'<0>'}\"); SET(indDeductiblePropVal, REPLACE(indDeductibleToken, \"<0>\", networkTierDeductibleAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, indDeductiblePropVal)); SET(indOOPMToken, \"{'IndOOPM':'<0>'}\"); SET(indOOPMPropVal, REPLACE(indOOPMToken, \"<0>\", networkTierOOPMAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, indOOPMPropVal)); SET(IndExist, \"Yes\")}IF(EQUALS(networkTierCoverageValue, \"Family\")==TRUE()){SET(familyDeductibleToken, \"{'FamDeductible':'<0>'}\"); SET(familyDeductiblePropVal, REPLACE(familyDeductibleToken, \"<0>\", networkTierDeductibleAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, familyDeductiblePropVal)); SET(familyOOPMToken, \"{'FamilyOOPM':'<0>'}\"); SET(familyOOPMPropVal, REPLACE(familyOOPMToken, \"<0>\", networkTierOOPMAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, familyOOPMPropVal)); SET(FamExist, \"Yes\")}IF(EQUALS(networkTierCoverageValue, \"Two Person\")==TRUE()){SET(TwoPersonDeductibleToken, \"{'TwoPersonDeductible':'<0>'}\"); SET(TwoPersonDeductiblePropVal, REPLACE(TwoPersonDeductibleToken, \"<0>\", networkTierDeductibleAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, TwoPersonDeductiblePropVal)); SET(TwoPersonOOPMToken, \"{'TwoPersonOOPM':'<0>'}\"); SET(TwoPersonOOPMPropVal, REPLACE(TwoPersonOOPMToken, \"<0>\", networkTierOOPMAmountValue)); SET(FinalBRG, UPDATEARRAY(FinalBRG, deductibleBRGTokenCondition, TwoPersonOOPMPropVal)) SET(TwopersonExist, \"Yes\");}SET(networkCovergareCounter, networkCovergareCounter + 1)}IF(EQUALS(IndExist, \"No\")==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, tierCondition, \"{'IndDeductible':'Not Applicable','IndOOPM':'Not Applicable'}\")); SET(servicesWithManualOverride, UPDATEARRAY(servicesWithManualOverride, tierCondition, \"{'IndDeductible':'Not Applicable','IndOOPM':'Not Applicable'}\"))}IF(EQUALS(FamExist, \"No\")==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, tierCondition, \"{'FamDeductible':'Not Applicable','FamilyOOPM':'Not Applicable'}\")); SET(servicesWithManualOverride, UPDATEARRAY(servicesWithManualOverride, tierCondition, \"{'FamDeductible':'Not Applicable','FamilyOOPM':'Not Applicable'}\"))}IF(EQUALS(TwopersonExist, \"No\")==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, tierCondition, \"{'TwoPersonDeductible':'Not Applicable','TwoPersonOOPM':'Not Applicable'}\")); SET(servicesWithManualOverride, UPDATEARRAY(servicesWithManualOverride, tierCondition, \"{'TwoPersonDeductible':'Not Applicable','TwoPersonOOPM':'Not Applicable'}\"));}SET(NetWorkCounter, NetWorkCounter + 1)}SET(NetWorkCounterForCostType, 0); WHILE(NetWorkCounterForCostType < NetworkTierCount){SET(networkTierFilterListResult, FILTERLIST(e, NetWorkCounterForCostType, \"\", \"\", \"\")); SET(networkTierValue, GETVAL(networkTierFilterListResult, \"NetworkTier\")); SET(tierCondition, \"NetworkTier=[<0>]\"); SET(tierCondition, REPLACE(tierCondition, \"<0>\", networkTierValue)); SET(costSharegroupListFilterListCountData1, FILTERLIST(costShareGroupList, tierCondition, \"\", \"\", \"\")); SET(costSharegroupCount, COUNT(costSharegroupListFilterListCountData1)); SET(networkCostshareSetvalueCounter, 0); WHILE(networkCostshareSetvalueCounter < costSharegroupCount){SET(costSharegroupListCountData, FILTERLIST(costSharegroupListFilterListCountData1, networkCostshareSetvalueCounter, \"\", \"\", \"\")); SET(costSharegroupListCostShareGroupValue, GETVAL(costSharegroupListCountData, \"CostShareGroup\")); SET(costSharegroupListNetworkTierValue, GETVAL(costSharegroupListCountData, \"NetworkTier\")); SET(costSharegroupListCopayValueValue, GETVAL(costSharegroupListCountData, \"CopayValue\")); SET(costSharegroupListCostShareTypeValue, GETVAL(costSharegroupListCountData, \"CostShareType\")); SET(costSharegroupListtierCondition, \"CostShareGroup=[<0>]&NetworkTier=[<1>]\"); SET(costSharegroupListtierCondition, REPLACE(costSharegroupListtierCondition, \"<0>\", costSharegroupListCostShareGroupValue)); SET(costSharegroupListtierCondition, REPLACE(costSharegroupListtierCondition, \"<1>\", costSharegroupListNetworkTierValue)); SET(SameAsNetworkTier, GETVAL(costSharegroupListCountData, \"SameAsNetworkTier\")); SET(SameAsCostShare, GETVAL(costSharegroupListCountData, \"SameAsCostShare\")); SET(HasSameAsNetworkTier, 0); SET(SameAsNetworkTierDedProp, \"{'IndDeductible':'<1>','FamDeductible':'<2>','TwoPersonDeductible':'<3>'}\"); IF(EQUALS(SameAsNetworkTier, \"\") < > TRUE()){IF(CONTAINS(SameAsCostShare, \"Deductible\")==TRUE()){SET(HasSameAsNetworkTier, 1); SET(tierCondition, \"NetworkTier=[<0>]\"); SET(tierCondition, REPLACE(tierCondition, \"<0>\", SameAsNetworkTier)); SET(cvgIndCondition, tierCondition); SET(cvgFamCondition, tierCondition); SET(cvgTwoPersonCondition, tierCondition); SET(IndTierCondition, APPEND(cvgIndCondition, \"&CoverageName=[Individual]\")); SET(FamTierCondition, APPEND(cvgFamCondition, \"&CoverageName=[Family]\")); SET(TwoPersonTierCondition, APPEND(cvgTwoPersonCondition, \"&CoverageName=[Two Person]\")); SET(IndDeductibleRow, FILTERLIST(deductibleCostShare, IndTierCondition, \"\", \"\", \"\")); SET(FamDeductibleRow, FILTERLIST(deductibleCostShare, FamTierCondition, \"\", \"\", \"\")); SET(TwoPersonDeductibleRow, FILTERLIST(deductibleCostShare, TwoPersonTierCondition, \"\", \"\", \"\")); SET(SameAsNetworkTierDedProp, \"{'IndDeductible':'<1>','FamDeductible':'<2>','TwoPersonDeductible':'<3>'}\"); SET(SameAsNetworkTierDedProp, REPLACE(SameAsNetworkTierDedProp, \"<1>\", GETVAL(IndDeductibleRow, \"DeductibleAmount\"))); SET(SameAsNetworkTierDedProp, REPLACE(SameAsNetworkTierDedProp, \"<2>\", GETVAL(FamDeductibleRow, \"DeductibleAmount\"))) SET(SameAsNetworkTierDedProp, REPLACE(SameAsNetworkTierDedProp, \"<3>\", GETVAL(TwoPersonDeductibleRow, \"DeductibleAmount\")));}}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Copay Only\")==TRUE()){SET(costSharegroupListTokenFinal, \"{'Coinsurance':'Not Applicable','IndDeductible':'Not Applicable','FamDeductible':'Not Applicable','TwoPersonDeductible':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Coinsurance Only\")==TRUE()){SET(costSharegroupListTokenFinal, \"{'Copay':'Not Applicable','IndDeductible':'Not Applicable','FamDeductible':'Not Applicable','TwoPersonDeductible':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Deductible Only\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}SET(costSharegroupListTokenFinal, \"{'Copay':'Not Applicable','Coinsurance':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Deductible then Coinsurance\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}SET(costSharegroupListTokenFinal, \"{'Copay':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Deductible then Copay\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}SET(costSharegroupListTokenFinal, \"{'Coinsurance':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Copay then Deductible\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}SET(costSharegroupListTokenFinal, \"{'Coinsurance':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Copay then Coinsurance\")==TRUE()){SET(costSharegroupListTokenFinal, \"{'IndDeductible':'Not Applicable','FamDeductible':'Not Applicable','TwoPersonDeductible':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Copay, Deductible, then Coinsurance\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Deductible, Copay, then Coinsurance\")==TRUE()){IF(EQUALS(HasSameAsNetworkTier, 1)==TRUE()){SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, SameAsNetworkTierDedProp))}}IF(EQUALS(costSharegroupListCostShareTypeValue, \"No Cost\")==TRUE()){SET(costSharegroupListTokenFinal, \"{'Copay':'$0.00','Coinsurance':'Not Applicable','IndDeductible':'Not Applicable','FamDeductible':'Not Applicable','TwoPersonDeductible':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"Not Covered\")==TRUE()){SET(costSharegroupListTokenFinal, \"{'Copay':'Not Covered','Coinsurance':'Not Covered','IndDeductible':'Not Covered','FamDeductible':'Not Covered',,'TwoPersonDeductible':'Not Covered''Covered':''}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costSharegroupListTokenFinal))}IF(EQUALS(costSharegroupListCostShareTypeValue, \"\")==TRUE()){SET(costShareGroupBlankToken, \"{'Copay':'Not Applicable','Coinsurance':'Not Applicable','IndDeductible':'Not Applicable','FamDeductible':'Not Applicable','TwoPersonDeductible':'Not Applicable'}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, costSharegroupListtierCondition, costShareGroupBlankToken))}SET(networkCostshareSetvalueCounter, networkCostshareSetvalueCounter + 1)}SET(NetWorkCounterForCostType, NetWorkCounterForCostType + 1)}SET(allCoverageLevels, GETDISTINCTCOLVAL(h, \"CoverageName\")); IF(CONTAINS(allCoverageLevels, \"Individual\") < > TRUE()){SET(cvgIndDedCondition, \"{'IndDeductible':'','IndOOPM':''}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[true]|Covered=[Yes]\", cvgIndDedCondition)); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[false]|Covered=[No]\", cvgIndDedCondition))}IF(CONTAINS(allCoverageLevels, \"Family\") < > TRUE()){SET(cvgFamCondition, \"{'FamDeductible':'','FamilyOOPM':''}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[true]|Covered=[Yes]\", cvgFamCondition)); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[false]|Covered=[No]\", cvgFamCondition))}IF(CONTAINS(allCoverageLevels, \"Two Person\") < > TRUE()){SET(cvgTwoPersonCondition, \"{'TwoPersonDeductible ':'','TwoPersonOOPM':''}\"); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[true]|Covered=[Yes]\", cvgTwoPersonCondition)); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[false]|Covered=[No]\", cvgTwoPersonCondition))}IF(COUNT(servicesWithManualOverride) > 0){SET(FinalBRG, UNION(servicesWithManualOverride, FinalBRG, \"BenefitServiceCode,NetworkTier\"))}SET(limitValueProp, \"{'Limits':'No'}\"); SET(manualOverrideProp, \"{'ManualOverride':'No'}\"); SET(limitToken, CREATETOKEN(limitValueProp)); SET(FinalBRG, CROSSJOIN(FinalBRG, limitToken)); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[Yes]\", limitValueProp)); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[No]\", limitValueProp)); SET(unPivotLimitDetails, UNPIVOTARRAY(limitDetails, \"MLServiceList\")); SET(AllTierLimit, FILTERLIST(unPivotLimitDetails, \"NetworkTier=[All]\", \"\", \"\", \"\")); IF(COUNT(AllTierLimit) > 0){SET(unPivotLimitDetails, EXCEPT(unPivotLimitDetails, AllTierLimit, \"BenefitServiceCode,NetworkTier\")); SET(LimitNetworkCounter, 0); WHILE(LimitNetworkCounter < NetworkTierCount){SET(temp, AllTierLimit); SET(temp, CREATETOKEN(temp)); SET(networkTierFilterListResult, FILTERLIST(e, LimitNetworkCounter, \"\", \"\", \"\")); SET(networkTierValue, GETVAL(networkTierFilterListResult, \"NetworkTier\")); SET(limitValueProp, \"{'NetworkTier':'<0>','NetworkName':'<1>'}\"); SET(limitValueProp, REPLACE(limitValueProp, \"<0>\", networkTierValue)); SET(limitValueProp, REPLACE(limitValueProp, \"<1>\", GETVAL(networkTierFilterListResult, \"NetworkName\"))); SET(temp, UPDATEARRAY(temp, \"NetworkTier=[All]\", limitValueProp)); SET(unPivotLimitDetails, UNION(unPivotLimitDetails, temp, \"BenefitServiceCode,NetworkTier\")); SET(LimitNetworkCounter, LimitNetworkCounter + 1)}}SET(limitYesServices, INTERSECT(FinalBRG, unPivotLimitDetails, \"BenefitServiceCode,NetworkTier\")); SET(limitNoServices, EXCEPT(FinalBRG, limitYesServices, \"BenefitServiceCode,NetworkTier\")); SET(limitYesValueProp, \"{'Limits':'Yes'}\"); SET(limitYesServices, UPDATEARRAY(limitYesServices, \"Limits=[No]\", limitYesValueProp)); SET(FinalBRG, UNION(limitYesServices, limitNoServices, \"BenefitServiceCode,NetworkTier\")); SET(MOYesServices, FILTERLIST(FinalBRG, \"ManualOverride=[Yes]\", \"\", \"\", \"\")); SET(MONoServices, EXCEPT(FinalBRG, MOYesServices, \"BenefitServiceCode,NetworkTier\")); SET(FinalBRG, UNION(MOYesServices, MONoServices, \"BenefitServiceCode,NetworkTier\")); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[false]\", \"{'Covered':'No'}\")); SET(FinalBRG, UPDATEARRAY(FinalBRG, \"Covered=[]\", \"{'Covered':'No'}\")); SETARRAY(target, FinalBRG)}ELSE{SETARRAY(target, \"[]\")}}ELSE{SETARRAY(target, \"[{'BenefitServiceCode':'','BenefitCategory1':'','BenefitCategory2':'','BenefitCategory3':'','BenefitCategory4':'','BenefitCategory5':'','PlaceofService':'','CostShareGroup':'','ManualOverride':'','NetworkTier':'','NetworkName':'','Covered':'','Copay':'','CopayFrequency':'','Coinsurance':'','IndDeductible':'','FamDeductible':'','IndOOPM':'','TwoPersonOOPM':'','FamilyOOPM':'','PriorApproval':'','Referral':'','ReductionofBenefits':'','SameAsNetworkTier':'','SameAsCostShare':'','TwoPersonDeductible':'','CopayType':'','DependentOutofAreaCoverage':'','StudentDependentOOACovered':'','PrimaryPayer':'','PrimaryDenied':'','PrimaryPaid':'','ApplyFromNetworkLevel':'','ApplyFromNetworkType':'','ApplyTowardBenefitMaximum':'','BenefitSpecificDeductibleIndicator':'','CostShareType':'','CopaySupplement':''}]\");}",
            "keycolumns": "",
            "mappings": {
              "sourcefields": "",
              "targetfields": ""
            }
          }
        ]
      }
    }
  }
}