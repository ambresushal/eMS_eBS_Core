// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.37595
//    <NameSpace>tmg.equinox.qhp.entities</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace tmg.equinox.qhp.entities
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://vo.ffe.cms.hhs.gov", IsNullable = false)]
    public partial class planBenefitTemplateVO
    {

        private List<planBenefitTemplateVOPackages> packagesListField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVO()
        {
            this.packagesListField = new List<planBenefitTemplateVOPackages>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("packages", IsNullable = false)]
        public List<planBenefitTemplateVOPackages> packagesList
        {
            get
            {
                return this.packagesListField;
            }
            set
            {
                this.packagesListField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVO));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVO object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVO object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVO);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVO obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVO Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVO)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVO object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVO object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVO object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVO obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVO);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVO obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVO LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackages
    {

        private planBenefitTemplateVOPackagesHeader headerField;

        private List<planBenefitTemplateVOPackagesBenefits> benefitsListField;

        private List<planBenefitTemplateVOPackagesPlans> plansListField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackages()
        {
            this.plansListField = new List<planBenefitTemplateVOPackagesPlans>();
            this.benefitsListField = new List<planBenefitTemplateVOPackagesBenefits>();
            this.headerField = new planBenefitTemplateVOPackagesHeader();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesHeader header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("benefits", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesBenefits> benefitsList
        {
            get
            {
                return this.benefitsListField;
            }
            set
            {
                this.benefitsListField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("plans", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesPlans> plansList
        {
            get
            {
                return this.plansListField;
            }
            set
            {
                this.plansListField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackages));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackages object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackages object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackages object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackages obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackages);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackages obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackages Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackages)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackages object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackages object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackages object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackages obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackages);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackages obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackages LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeader
    {

        private decimal templateVersionField;

        private planBenefitTemplateVOPackagesHeaderIssuerId issuerIdField;

        private planBenefitTemplateVOPackagesHeaderStatePostalCode statePostalCodeField;

        private planBenefitTemplateVOPackagesHeaderMarketCoverage marketCoverageField;

        private planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd dentalPlanOnlyIndField;

        private planBenefitTemplateVOPackagesHeaderTin tinField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesHeader()
        {
            this.tinField = new planBenefitTemplateVOPackagesHeaderTin();
            this.dentalPlanOnlyIndField = new planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd();
            this.marketCoverageField = new planBenefitTemplateVOPackagesHeaderMarketCoverage();
            this.statePostalCodeField = new planBenefitTemplateVOPackagesHeaderStatePostalCode();
            this.issuerIdField = new planBenefitTemplateVOPackagesHeaderIssuerId();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public decimal templateVersion
        {
            get
            {
                return this.templateVersionField;
            }
            set
            {
                this.templateVersionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesHeaderIssuerId issuerId
        {
            get
            {
                return this.issuerIdField;
            }
            set
            {
                this.issuerIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesHeaderStatePostalCode statePostalCode
        {
            get
            {
                return this.statePostalCodeField;
            }
            set
            {
                this.statePostalCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesHeaderMarketCoverage marketCoverage
        {
            get
            {
                return this.marketCoverageField;
            }
            set
            {
                this.marketCoverageField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd dentalPlanOnlyInd
        {
            get
            {
                return this.dentalPlanOnlyIndField;
            }
            set
            {
                this.dentalPlanOnlyIndField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesHeaderTin tin
        {
            get
            {
                return this.tinField;
            }
            set
            {
                this.tinField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeader));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeader);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeader obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeader Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeader);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeader obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeader LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeaderIssuerId
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeaderIssuerId));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderIssuerId object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeaderIssuerId object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderIssuerId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderIssuerId obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderIssuerId);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderIssuerId obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderIssuerId Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeaderIssuerId)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderIssuerId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeaderIssuerId object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderIssuerId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderIssuerId obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderIssuerId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderIssuerId obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderIssuerId LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeaderStatePostalCode
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeaderStatePostalCode));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderStatePostalCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeaderStatePostalCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderStatePostalCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderStatePostalCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderStatePostalCode);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderStatePostalCode obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderStatePostalCode Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeaderStatePostalCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderStatePostalCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeaderStatePostalCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderStatePostalCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderStatePostalCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderStatePostalCode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderStatePostalCode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderStatePostalCode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeaderMarketCoverage
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeaderMarketCoverage));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderMarketCoverage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeaderMarketCoverage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderMarketCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderMarketCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderMarketCoverage);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderMarketCoverage obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderMarketCoverage Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeaderMarketCoverage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderMarketCoverage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeaderMarketCoverage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderMarketCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderMarketCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderMarketCoverage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderMarketCoverage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderMarketCoverage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderDentalPlanOnlyInd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesHeaderTin
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesHeaderTin));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderTin object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesHeaderTin object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderTin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderTin obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderTin);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesHeaderTin obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderTin Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesHeaderTin)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesHeaderTin object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesHeaderTin object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesHeaderTin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderTin obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesHeaderTin);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesHeaderTin obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesHeaderTin LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefits
    {

        private planBenefitTemplateVOPackagesBenefitsBenefitTypeCode benefitTypeCodeField;

        private planBenefitTemplateVOPackagesBenefitsIsEHB isEHBField;

        private planBenefitTemplateVOPackagesBenefitsIsStateMandate isStateMandateField;

        private planBenefitTemplateVOPackagesBenefitsIsBenefitCovered isBenefitCoveredField;

        private planBenefitTemplateVOPackagesBenefitsServiceLimit serviceLimitField;

        private planBenefitTemplateVOPackagesBenefitsQuantityLimit quantityLimitField;

        private planBenefitTemplateVOPackagesBenefitsUnitLimit unitLimitField;

        private planBenefitTemplateVOPackagesBenefitsMinimumStay minimumStayField;

        private planBenefitTemplateVOPackagesBenefitsExclusion exclusionField;

        private planBenefitTemplateVOPackagesBenefitsExplanation explanationField;

        private planBenefitTemplateVOPackagesBenefitsEhbVarianceReason ehbVarianceReasonField;

        private planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 subjectToDeductibleTier1Field;

        private planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 subjectToDeductibleTier2Field;

        private planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP excludedInNetworkMOOPField;

        private planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP excludedOutOfNetworkMOOPField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesBenefits()
        {
            this.excludedOutOfNetworkMOOPField = new planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP();
            this.excludedInNetworkMOOPField = new planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP();
            this.subjectToDeductibleTier2Field = new planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2();
            this.subjectToDeductibleTier1Field = new planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1();
            this.ehbVarianceReasonField = new planBenefitTemplateVOPackagesBenefitsEhbVarianceReason();
            this.explanationField = new planBenefitTemplateVOPackagesBenefitsExplanation();
            this.exclusionField = new planBenefitTemplateVOPackagesBenefitsExclusion();
            this.minimumStayField = new planBenefitTemplateVOPackagesBenefitsMinimumStay();
            this.unitLimitField = new planBenefitTemplateVOPackagesBenefitsUnitLimit();
            this.quantityLimitField = new planBenefitTemplateVOPackagesBenefitsQuantityLimit();
            this.serviceLimitField = new planBenefitTemplateVOPackagesBenefitsServiceLimit();
            this.isBenefitCoveredField = new planBenefitTemplateVOPackagesBenefitsIsBenefitCovered();
            this.isStateMandateField = new planBenefitTemplateVOPackagesBenefitsIsStateMandate();
            this.isEHBField = new planBenefitTemplateVOPackagesBenefitsIsEHB();
            this.benefitTypeCodeField = new planBenefitTemplateVOPackagesBenefitsBenefitTypeCode();
        }

        public override bool Equals(object obj)
        {
            var objToCompare = new planBenefitTemplateVOPackagesBenefits();
                objToCompare = (planBenefitTemplateVOPackagesBenefits)obj;
            
            return(
            this.excludedOutOfNetworkMOOPField.cellValue == objToCompare.excludedOutOfNetworkMOOPField.cellValue &&
            this.excludedInNetworkMOOPField.cellValue == objToCompare.excludedInNetworkMOOPField.cellValue &&
            this.subjectToDeductibleTier2Field.cellValue == objToCompare.subjectToDeductibleTier2Field.cellValue &&
            this.subjectToDeductibleTier1Field.cellValue == objToCompare.subjectToDeductibleTier1Field.cellValue &&
            this.ehbVarianceReasonField.cellValue == objToCompare.ehbVarianceReasonField.cellValue &&
            this.explanationField.cellValue == objToCompare.explanationField.cellValue &&
            this.exclusionField.cellValue == objToCompare.exclusionField.cellValue &&
            this.minimumStayField.cellValue == objToCompare.minimumStayField.cellValue &&
            this.unitLimitField.cellValue == objToCompare.unitLimitField.cellValue &&
            this.quantityLimitField.cellValue == objToCompare.quantityLimitField.cellValue &&
            this.serviceLimitField.cellValue == objToCompare.serviceLimitField.cellValue &&
            this.isBenefitCoveredField.cellValue == objToCompare.isBenefitCoveredField.cellValue &&
            this.isStateMandateField.cellValue == objToCompare.isStateMandateField.cellValue &&
            this.isEHBField.cellValue == objToCompare.isEHBField.cellValue &&
            this.benefitTypeCodeField.cellValue == objToCompare.benefitTypeCodeField.cellValue
                );
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesBenefitsBenefitTypeCode benefitTypeCode
        {
            get
            {
                return this.benefitTypeCodeField;
            }
            set
            {
                this.benefitTypeCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesBenefitsIsEHB isEHB
        {
            get
            {
                return this.isEHBField;
            }
            set
            {
                this.isEHBField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesBenefitsIsStateMandate isStateMandate
        {
            get
            {
                return this.isStateMandateField;
            }
            set
            {
                this.isStateMandateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesBenefitsIsBenefitCovered isBenefitCovered
        {
            get
            {
                return this.isBenefitCoveredField;
            }
            set
            {
                this.isBenefitCoveredField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesBenefitsServiceLimit serviceLimit
        {
            get
            {
                return this.serviceLimitField;
            }
            set
            {
                this.serviceLimitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesBenefitsQuantityLimit quantityLimit
        {
            get
            {
                return this.quantityLimitField;
            }
            set
            {
                this.quantityLimitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesBenefitsUnitLimit unitLimit
        {
            get
            {
                return this.unitLimitField;
            }
            set
            {
                this.unitLimitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesBenefitsMinimumStay minimumStay
        {
            get
            {
                return this.minimumStayField;
            }
            set
            {
                this.minimumStayField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public planBenefitTemplateVOPackagesBenefitsExclusion exclusion
        {
            get
            {
                return this.exclusionField;
            }
            set
            {
                this.exclusionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public planBenefitTemplateVOPackagesBenefitsExplanation explanation
        {
            get
            {
                return this.explanationField;
            }
            set
            {
                this.explanationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public planBenefitTemplateVOPackagesBenefitsEhbVarianceReason ehbVarianceReason
        {
            get
            {
                return this.ehbVarianceReasonField;
            }
            set
            {
                this.ehbVarianceReasonField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 subjectToDeductibleTier1
        {
            get
            {
                return this.subjectToDeductibleTier1Field;
            }
            set
            {
                this.subjectToDeductibleTier1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 subjectToDeductibleTier2
        {
            get
            {
                return this.subjectToDeductibleTier2Field;
            }
            set
            {
                this.subjectToDeductibleTier2Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP excludedInNetworkMOOP
        {
            get
            {
                return this.excludedInNetworkMOOPField;
            }
            set
            {
                this.excludedInNetworkMOOPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP excludedOutOfNetworkMOOP
        {
            get
            {
                return this.excludedOutOfNetworkMOOPField;
            }
            set
            {
                this.excludedOutOfNetworkMOOPField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefits));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefits object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefits object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefits);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefits obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefits Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefits)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefits object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefits object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefits);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefits obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefits LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsBenefitTypeCode
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsBenefitTypeCode));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsBenefitTypeCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsBenefitTypeCode);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsBenefitTypeCode obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsBenefitTypeCode Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsBenefitTypeCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsBenefitTypeCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsBenefitTypeCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsBenefitTypeCode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsBenefitTypeCode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsBenefitTypeCode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsIsEHB
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsIsEHB));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsEHB object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsIsEHB object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsEHB object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsEHB obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsEHB);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsEHB obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsEHB Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsIsEHB)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsEHB object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsIsEHB object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsEHB object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsEHB obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsEHB);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsEHB obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsEHB LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsIsStateMandate
    {

        private object cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public object cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsIsStateMandate));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsStateMandate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsIsStateMandate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsStateMandate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsStateMandate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsStateMandate);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsStateMandate obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsStateMandate Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsIsStateMandate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsStateMandate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsIsStateMandate object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsStateMandate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsStateMandate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsStateMandate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsStateMandate obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsStateMandate LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsIsBenefitCovered
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsIsBenefitCovered));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsBenefitCovered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsBenefitCovered);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsIsBenefitCovered obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsBenefitCovered Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsIsBenefitCovered)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsIsBenefitCovered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsBenefitCovered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsIsBenefitCovered);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsIsBenefitCovered obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsIsBenefitCovered LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsServiceLimit
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsServiceLimit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsServiceLimit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsServiceLimit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsServiceLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsServiceLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsServiceLimit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsServiceLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsServiceLimit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsServiceLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsServiceLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsServiceLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsServiceLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsServiceLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsServiceLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsServiceLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsServiceLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsQuantityLimit
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsQuantityLimit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsQuantityLimit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsQuantityLimit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsQuantityLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsQuantityLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsQuantityLimit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsQuantityLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsQuantityLimit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsQuantityLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsQuantityLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsQuantityLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsQuantityLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsQuantityLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsQuantityLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsQuantityLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsQuantityLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsUnitLimit
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsUnitLimit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsUnitLimit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsUnitLimit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsUnitLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsUnitLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsUnitLimit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsUnitLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsUnitLimit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsUnitLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsUnitLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsUnitLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsUnitLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsUnitLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsUnitLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsUnitLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsUnitLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsMinimumStay
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsMinimumStay));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsMinimumStay object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsMinimumStay object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsMinimumStay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsMinimumStay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsMinimumStay);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsMinimumStay obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsMinimumStay Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsMinimumStay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsMinimumStay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsMinimumStay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsMinimumStay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsMinimumStay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsMinimumStay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsMinimumStay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsMinimumStay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsExclusion
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsExclusion));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExclusion object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsExclusion object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExclusion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExclusion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExclusion);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExclusion obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExclusion Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsExclusion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExclusion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsExclusion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExclusion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExclusion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExclusion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExclusion obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExclusion LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsExplanation
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsExplanation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExplanation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsExplanation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExplanation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExplanation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExplanation);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExplanation obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExplanation Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsExplanation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExplanation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsExplanation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExplanation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExplanation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExplanation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExplanation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExplanation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsEhbVarianceReason
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsEhbVarianceReason));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsEhbVarianceReason obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsEhbVarianceReason);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsEhbVarianceReason obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsEhbVarianceReason Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsEhbVarianceReason)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsEhbVarianceReason object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsEhbVarianceReason obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsEhbVarianceReason);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsEhbVarianceReason obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsEhbVarianceReason LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier1 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsSubjectToDeductibleTier2 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExcludedInNetworkMOOP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesBenefitsExcludedOutOfNetworkMOOP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlans
    {

        private planBenefitTemplateVOPackagesPlansPlanAttributes planAttributesField;

        private List<planBenefitTemplateVOPackagesPlansCostShareVariance> costShareVariancesListField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlans()
        {
            this.costShareVariancesListField = new List<planBenefitTemplateVOPackagesPlansCostShareVariance>();
            this.planAttributesField = new planBenefitTemplateVOPackagesPlansPlanAttributes();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansPlanAttributes planAttributes
        {
            get
            {
                return this.planAttributesField;
            }
            set
            {
                this.planAttributesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("costShareVariance", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesPlansCostShareVariance> costShareVariancesList
        {
            get
            {
                return this.costShareVariancesListField;
            }
            set
            {
                this.costShareVariancesListField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlans));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlans object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlans object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlans object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlans obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlans);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlans obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlans Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlans)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlans object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlans object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlans object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlans obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlans);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlans obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlans LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributes
    {

        private planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID standardComponentIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName planMarketingNameField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID hiosProductIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesHpid hpidField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID networkIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID serviceAreaIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID formularyIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan isNewPlanField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesPlanType planTypeField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel metalLevelField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign uniquePlanDesignField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp qhpOrNonQhpField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd insurancePlanPregnancyNoticeReqIndField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired isSpecialistReferralRequiredField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType healthCareSpecialistReferralTypeField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText insurancePlanBenefitExclusionTextField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation indianPlanVariationField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility hsaEligibilityField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator employerHSAHRAContributionIndicatorField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA empContributionAmountForHSAOrHRAField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering childOnlyOfferingField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID childOnlyPlanIDField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered isWellnessProgramOfferedField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered isDiseaseMgmtProgramsOfferedField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental ehbApportionmentForPediatricDentalField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate guaranteedVsEstimatedRateField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs maximumCoinsuranceForSpecialtyDrugsField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay maxNumDaysForChargingInpatientCopayField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits beginPrimaryCareCostSharingAfterSetNumberVisitsField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays beginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopaysField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate planEffectiveDateField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate planExpirationDateField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage outOfCountryCoverageField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription outOfCountryCoverageDescriptionField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage outOfServiceAreaCoverageField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription outOfServiceAreaCoverageDescriptionField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork nationalNetworkField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL summaryBenefitAndCoverageURLField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL enrollmentPaymentURLField;

        private planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure planBrochureField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansPlanAttributes()
        {
            this.planBrochureField = new planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure();
            this.enrollmentPaymentURLField = new planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL();
            this.summaryBenefitAndCoverageURLField = new planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL();
            this.nationalNetworkField = new planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork();
            this.outOfServiceAreaCoverageDescriptionField = new planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription();
            this.outOfServiceAreaCoverageField = new planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage();
            this.outOfCountryCoverageDescriptionField = new planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription();
            this.outOfCountryCoverageField = new planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage();
            this.planExpirationDateField = new planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate();
            this.planEffectiveDateField = new planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate();
            this.beginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopaysField = new planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays();
            this.beginPrimaryCareCostSharingAfterSetNumberVisitsField = new planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits();
            this.maxNumDaysForChargingInpatientCopayField = new planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay();
            this.maximumCoinsuranceForSpecialtyDrugsField = new planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs();
            this.guaranteedVsEstimatedRateField = new planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate();
            this.ehbApportionmentForPediatricDentalField = new planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental();
            this.isDiseaseMgmtProgramsOfferedField = new planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered();
            this.isWellnessProgramOfferedField = new planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered();
            this.childOnlyPlanIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID();
            this.childOnlyOfferingField = new planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering();
            this.empContributionAmountForHSAOrHRAField = new planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA();
            this.employerHSAHRAContributionIndicatorField = new planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator();
            this.hsaEligibilityField = new planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility();
            this.indianPlanVariationField = new planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation();
            this.insurancePlanBenefitExclusionTextField = new planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText();
            this.healthCareSpecialistReferralTypeField = new planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType();
            this.isSpecialistReferralRequiredField = new planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired();
            this.insurancePlanPregnancyNoticeReqIndField = new planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd();
            this.qhpOrNonQhpField = new planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp();
            this.uniquePlanDesignField = new planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign();
            this.metalLevelField = new planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel();
            this.planTypeField = new planBenefitTemplateVOPackagesPlansPlanAttributesPlanType();
            this.isNewPlanField = new planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan();
            this.formularyIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID();
            this.serviceAreaIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID();
            this.networkIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID();
            this.hpidField = new planBenefitTemplateVOPackagesPlansPlanAttributesHpid();
            this.hiosProductIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID();
            this.planMarketingNameField = new planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName();
            this.standardComponentIDField = new planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID standardComponentID
        {
            get
            {
                return this.standardComponentIDField;
            }
            set
            {
                this.standardComponentIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName planMarketingName
        {
            get
            {
                return this.planMarketingNameField;
            }
            set
            {
                this.planMarketingNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID hiosProductID
        {
            get
            {
                return this.hiosProductIDField;
            }
            set
            {
                this.hiosProductIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesHpid hpid
        {
            get
            {
                return this.hpidField;
            }
            set
            {
                this.hpidField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID networkID
        {
            get
            {
                return this.networkIDField;
            }
            set
            {
                this.networkIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID serviceAreaID
        {
            get
            {
                return this.serviceAreaIDField;
            }
            set
            {
                this.serviceAreaIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID formularyID
        {
            get
            {
                return this.formularyIDField;
            }
            set
            {
                this.formularyIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan isNewPlan
        {
            get
            {
                return this.isNewPlanField;
            }
            set
            {
                this.isNewPlanField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesPlanType planType
        {
            get
            {
                return this.planTypeField;
            }
            set
            {
                this.planTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel metalLevel
        {
            get
            {
                return this.metalLevelField;
            }
            set
            {
                this.metalLevelField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign uniquePlanDesign
        {
            get
            {
                return this.uniquePlanDesignField;
            }
            set
            {
                this.uniquePlanDesignField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp qhpOrNonQhp
        {
            get
            {
                return this.qhpOrNonQhpField;
            }
            set
            {
                this.qhpOrNonQhpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd insurancePlanPregnancyNoticeReqInd
        {
            get
            {
                return this.insurancePlanPregnancyNoticeReqIndField;
            }
            set
            {
                this.insurancePlanPregnancyNoticeReqIndField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired isSpecialistReferralRequired
        {
            get
            {
                return this.isSpecialistReferralRequiredField;
            }
            set
            {
                this.isSpecialistReferralRequiredField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType healthCareSpecialistReferralType
        {
            get
            {
                return this.healthCareSpecialistReferralTypeField;
            }
            set
            {
                this.healthCareSpecialistReferralTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText insurancePlanBenefitExclusionText
        {
            get
            {
                return this.insurancePlanBenefitExclusionTextField;
            }
            set
            {
                this.insurancePlanBenefitExclusionTextField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation indianPlanVariation
        {
            get
            {
                return this.indianPlanVariationField;
            }
            set
            {
                this.indianPlanVariationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility hsaEligibility
        {
            get
            {
                return this.hsaEligibilityField;
            }
            set
            {
                this.hsaEligibilityField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator employerHSAHRAContributionIndicator
        {
            get
            {
                return this.employerHSAHRAContributionIndicatorField;
            }
            set
            {
                this.employerHSAHRAContributionIndicatorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA empContributionAmountForHSAOrHRA
        {
            get
            {
                return this.empContributionAmountForHSAOrHRAField;
            }
            set
            {
                this.empContributionAmountForHSAOrHRAField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering childOnlyOffering
        {
            get
            {
                return this.childOnlyOfferingField;
            }
            set
            {
                this.childOnlyOfferingField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID childOnlyPlanID
        {
            get
            {
                return this.childOnlyPlanIDField;
            }
            set
            {
                this.childOnlyPlanIDField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered isWellnessProgramOffered
        {
            get
            {
                return this.isWellnessProgramOfferedField;
            }
            set
            {
                this.isWellnessProgramOfferedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 23)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered isDiseaseMgmtProgramsOffered
        {
            get
            {
                return this.isDiseaseMgmtProgramsOfferedField;
            }
            set
            {
                this.isDiseaseMgmtProgramsOfferedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 24)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental ehbApportionmentForPediatricDental
        {
            get
            {
                return this.ehbApportionmentForPediatricDentalField;
            }
            set
            {
                this.ehbApportionmentForPediatricDentalField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 25)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate guaranteedVsEstimatedRate
        {
            get
            {
                return this.guaranteedVsEstimatedRateField;
            }
            set
            {
                this.guaranteedVsEstimatedRateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 26)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs maximumCoinsuranceForSpecialtyDrugs
        {
            get
            {
                return this.maximumCoinsuranceForSpecialtyDrugsField;
            }
            set
            {
                this.maximumCoinsuranceForSpecialtyDrugsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 27)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay maxNumDaysForChargingInpatientCopay
        {
            get
            {
                return this.maxNumDaysForChargingInpatientCopayField;
            }
            set
            {
                this.maxNumDaysForChargingInpatientCopayField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 28)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits beginPrimaryCareCostSharingAfterSetNumberVisits
        {
            get
            {
                return this.beginPrimaryCareCostSharingAfterSetNumberVisitsField;
            }
            set
            {
                this.beginPrimaryCareCostSharingAfterSetNumberVisitsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 29)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays beginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays
        {
            get
            {
                return this.beginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopaysField;
            }
            set
            {
                this.beginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopaysField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 30)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate planEffectiveDate
        {
            get
            {
                return this.planEffectiveDateField;
            }
            set
            {
                this.planEffectiveDateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 31)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate planExpirationDate
        {
            get
            {
                return this.planExpirationDateField;
            }
            set
            {
                this.planExpirationDateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 32)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage outOfCountryCoverage
        {
            get
            {
                return this.outOfCountryCoverageField;
            }
            set
            {
                this.outOfCountryCoverageField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 33)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription outOfCountryCoverageDescription
        {
            get
            {
                return this.outOfCountryCoverageDescriptionField;
            }
            set
            {
                this.outOfCountryCoverageDescriptionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 34)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage outOfServiceAreaCoverage
        {
            get
            {
                return this.outOfServiceAreaCoverageField;
            }
            set
            {
                this.outOfServiceAreaCoverageField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 35)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription outOfServiceAreaCoverageDescription
        {
            get
            {
                return this.outOfServiceAreaCoverageDescriptionField;
            }
            set
            {
                this.outOfServiceAreaCoverageDescriptionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 36)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork nationalNetwork
        {
            get
            {
                return this.nationalNetworkField;
            }
            set
            {
                this.nationalNetworkField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 37)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL summaryBenefitAndCoverageURL
        {
            get
            {
                return this.summaryBenefitAndCoverageURLField;
            }
            set
            {
                this.summaryBenefitAndCoverageURLField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 38)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL enrollmentPaymentURL
        {
            get
            {
                return this.enrollmentPaymentURLField;
            }
            set
            {
                this.enrollmentPaymentURLField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 39)]
        public planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure planBrochure
        {
            get
            {
                return this.planBrochureField;
            }
            set
            {
                this.planBrochureField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributes));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributes object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributes object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributes);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributes obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributes Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesStandardComponentID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanMarketingName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHiosProductID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesHpid
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesHpid));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHpid object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesHpid object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHpid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHpid obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHpid);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHpid obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHpid Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesHpid)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHpid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesHpid object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHpid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHpid obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHpid);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHpid obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHpid LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesNetworkID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesServiceAreaID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesFormularyID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsNewPlan LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesPlanType
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesPlanType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesPlanType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMetalLevel LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesUniquePlanDesign LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesQhpOrNonQhp LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanPregnancyNoticeReqInd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsSpecialistReferralRequired LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHealthCareSpecialistReferralType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesInsurancePlanBenefitExclusionText LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIndianPlanVariation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesHsaEligibility LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEmployerHSAHRAContributionIndicator LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEmpContributionAmountForHSAOrHRA LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyOffering LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesChildOnlyPlanID LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsWellnessProgramOffered LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesIsDiseaseMgmtProgramsOffered LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEhbApportionmentForPediatricDental LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesGuaranteedVsEstimatedRate LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMaximumCoinsuranceForSpecialtyDrugs LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesMaxNumDaysForChargingInpatientCopay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareCostSharingAfterSetNumberVisits LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesBeginPrimaryCareDeductibleOrCoinsuranceAfterSetNumberCopays LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanEffectiveDate LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanExpirationDate LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfCountryCoverageDescription LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesOutOfServiceAreaCoverageDescription LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesNationalNetwork LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesSummaryBenefitAndCoverageURL LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesEnrollmentPaymentURL LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansPlanAttributesPlanBrochure LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariance
    {

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanId planIdField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName planMarketingNameField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel metalLevelField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType csrVariationTypeField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue issuerActuarialValueField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber avCalculatorOutputNumberField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated medicalAndDrugDeductiblesIntegratedField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated medicalAndDrugMaxOutOfPocketIntegratedField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers multipleProviderTiersField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization firstTierUtilizationField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization secondTierUtilizationField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbc sbcField;

        private List<planBenefitTemplateVOPackagesPlansCostShareVarianceMoop> moopListField;

        private List<planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible> planDeductibleListField;

        private List<planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit> serviceVisitListField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansCostShareVariance()
        {
            this.serviceVisitListField = new List<planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit>();
            this.planDeductibleListField = new List<planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible>();
            this.moopListField = new List<planBenefitTemplateVOPackagesPlansCostShareVarianceMoop>();
            this.sbcField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbc();
            this.secondTierUtilizationField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization();
            this.firstTierUtilizationField = new planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization();
            this.multipleProviderTiersField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers();
            this.medicalAndDrugMaxOutOfPocketIntegratedField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated();
            this.medicalAndDrugDeductiblesIntegratedField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated();
            this.avCalculatorOutputNumberField = new planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber();
            this.issuerActuarialValueField = new planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue();
            this.csrVariationTypeField = new planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType();
            this.metalLevelField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel();
            this.planMarketingNameField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName();
            this.planIdField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanId();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanId planId
        {
            get
            {
                return this.planIdField;
            }
            set
            {
                this.planIdField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName planMarketingName
        {
            get
            {
                return this.planMarketingNameField;
            }
            set
            {
                this.planMarketingNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel metalLevel
        {
            get
            {
                return this.metalLevelField;
            }
            set
            {
                this.metalLevelField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType csrVariationType
        {
            get
            {
                return this.csrVariationTypeField;
            }
            set
            {
                this.csrVariationTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue issuerActuarialValue
        {
            get
            {
                return this.issuerActuarialValueField;
            }
            set
            {
                this.issuerActuarialValueField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber avCalculatorOutputNumber
        {
            get
            {
                return this.avCalculatorOutputNumberField;
            }
            set
            {
                this.avCalculatorOutputNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated medicalAndDrugDeductiblesIntegrated
        {
            get
            {
                return this.medicalAndDrugDeductiblesIntegratedField;
            }
            set
            {
                this.medicalAndDrugDeductiblesIntegratedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated medicalAndDrugMaxOutOfPocketIntegrated
        {
            get
            {
                return this.medicalAndDrugMaxOutOfPocketIntegratedField;
            }
            set
            {
                this.medicalAndDrugMaxOutOfPocketIntegratedField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers multipleProviderTiers
        {
            get
            {
                return this.multipleProviderTiersField;
            }
            set
            {
                this.multipleProviderTiersField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization firstTierUtilization
        {
            get
            {
                return this.firstTierUtilizationField;
            }
            set
            {
                this.firstTierUtilizationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization secondTierUtilization
        {
            get
            {
                return this.secondTierUtilizationField;
            }
            set
            {
                this.secondTierUtilizationField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbc sbc
        {
            get
            {
                return this.sbcField;
            }
            set
            {
                this.sbcField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("moop", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesPlansCostShareVarianceMoop> moopList
        {
            get
            {
                return this.moopListField;
            }
            set
            {
                this.moopListField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 13)]
        [System.Xml.Serialization.XmlArrayItemAttribute("planDeductible", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible> planDeductibleList
        {
            get
            {
                return this.planDeductibleListField;
            }
            set
            {
                this.planDeductibleListField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 14)]
        [System.Xml.Serialization.XmlArrayItemAttribute("serviceVisit", IsNullable = false)]
        public List<planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit> serviceVisitList
        {
            get
            {
                return this.serviceVisitListField;
            }
            set
            {
                this.serviceVisitListField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariance));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariance);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariance obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariance Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanId
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanId));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanId obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanId);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanId obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanId Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanId)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanId obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanId obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanId LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanMarketingName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMetalLevel LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceCsrVariationType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceIssuerActuarialValue LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceAvCalculatorOutputNumber LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugDeductiblesIntegrated LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMedicalAndDrugMaxOutOfPocketIntegrated LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMultipleProviderTiers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceFirstTierUtilization LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSecondTierUtilization LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbc
    {

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible havingBabyDeductibleField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment havingBabyCoPaymentField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance havingBabyCoInsuranceField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit havingBabyLimitField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible havingDiabetesDeductibleField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay havingDiabetesCopayField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance havingDiabetesCoInsuranceField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit havingDiabetesLimitField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbc()
        {
            this.havingDiabetesLimitField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit();
            this.havingDiabetesCoInsuranceField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance();
            this.havingDiabetesCopayField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay();
            this.havingDiabetesDeductibleField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible();
            this.havingBabyLimitField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit();
            this.havingBabyCoInsuranceField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance();
            this.havingBabyCoPaymentField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment();
            this.havingBabyDeductibleField = new planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible havingBabyDeductible
        {
            get
            {
                return this.havingBabyDeductibleField;
            }
            set
            {
                this.havingBabyDeductibleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment havingBabyCoPayment
        {
            get
            {
                return this.havingBabyCoPaymentField;
            }
            set
            {
                this.havingBabyCoPaymentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance havingBabyCoInsurance
        {
            get
            {
                return this.havingBabyCoInsuranceField;
            }
            set
            {
                this.havingBabyCoInsuranceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit havingBabyLimit
        {
            get
            {
                return this.havingBabyLimitField;
            }
            set
            {
                this.havingBabyLimitField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible havingDiabetesDeductible
        {
            get
            {
                return this.havingDiabetesDeductibleField;
            }
            set
            {
                this.havingDiabetesDeductibleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay havingDiabetesCopay
        {
            get
            {
                return this.havingDiabetesCopayField;
            }
            set
            {
                this.havingDiabetesCopayField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance havingDiabetesCoInsurance
        {
            get
            {
                return this.havingDiabetesCoInsuranceField;
            }
            set
            {
                this.havingDiabetesCoInsuranceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit havingDiabetesLimit
        {
            get
            {
                return this.havingDiabetesLimitField;
            }
            set
            {
                this.havingDiabetesLimitField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbc));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbc);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbc obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbc Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbc);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbc LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyDeductible LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoPayment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyCoInsurance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingBabyLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesDeductible LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCopay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesCoInsurance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceSbcHavingDiabetesLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoop
    {

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName nameField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount inNetworkTier1IndividualAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount inNetworkTier1FamilyAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount inNetworkTier2IndividualAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount inNetworkTier2FamilyAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount outOfNetworkIndividualAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount outOfNetworkFamilyAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount combinedInOutNetworkIndividualAmountField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount combinedInOutNetworkFamilyAmountField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoop()
        {
            this.combinedInOutNetworkFamilyAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount();
            this.combinedInOutNetworkIndividualAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount();
            this.outOfNetworkFamilyAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount();
            this.outOfNetworkIndividualAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount();
            this.inNetworkTier2FamilyAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount();
            this.inNetworkTier2IndividualAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount();
            this.inNetworkTier1FamilyAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount();
            this.inNetworkTier1IndividualAmountField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount();
            this.nameField = new planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount inNetworkTier1IndividualAmount
        {
            get
            {
                return this.inNetworkTier1IndividualAmountField;
            }
            set
            {
                this.inNetworkTier1IndividualAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount inNetworkTier1FamilyAmount
        {
            get
            {
                return this.inNetworkTier1FamilyAmountField;
            }
            set
            {
                this.inNetworkTier1FamilyAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount inNetworkTier2IndividualAmount
        {
            get
            {
                return this.inNetworkTier2IndividualAmountField;
            }
            set
            {
                this.inNetworkTier2IndividualAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount inNetworkTier2FamilyAmount
        {
            get
            {
                return this.inNetworkTier2FamilyAmountField;
            }
            set
            {
                this.inNetworkTier2FamilyAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount outOfNetworkIndividualAmount
        {
            get
            {
                return this.outOfNetworkIndividualAmountField;
            }
            set
            {
                this.outOfNetworkIndividualAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount outOfNetworkFamilyAmount
        {
            get
            {
                return this.outOfNetworkFamilyAmountField;
            }
            set
            {
                this.outOfNetworkFamilyAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount combinedInOutNetworkIndividualAmount
        {
            get
            {
                return this.combinedInOutNetworkIndividualAmountField;
            }
            set
            {
                this.combinedInOutNetworkIndividualAmountField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount combinedInOutNetworkFamilyAmount
        {
            get
            {
                return this.combinedInOutNetworkFamilyAmountField;
            }
            set
            {
                this.combinedInOutNetworkFamilyAmountField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoop));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoop obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoop);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoop obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoop Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoop)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoop object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoop obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoop);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoop obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoop LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1IndividualAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier1FamilyAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2IndividualAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopInNetworkTier2FamilyAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkIndividualAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopOutOfNetworkFamilyAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkIndividualAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceMoopCombinedInOutNetworkFamilyAmount LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible
    {

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType deductibleTypeField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual inNetworkTier1IndividualField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family inNetworkTier1FamilyField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 coinsuranceInNetworkTier1Field;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual inNetworkTierTwoIndividualField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily inNetworkTierTwoFamilyField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 coinsuranceInNetworkTier2Field;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual outOfNetworkIndividualField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily outOfNetworkFamilyField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual combinedInOrOutNetworkIndividualField;

        private planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily combinedInOrOutNetworkFamilyField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible()
        {
            this.combinedInOrOutNetworkFamilyField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily();
            this.combinedInOrOutNetworkIndividualField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual();
            this.outOfNetworkFamilyField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily();
            this.outOfNetworkIndividualField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual();
            this.coinsuranceInNetworkTier2Field = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2();
            this.inNetworkTierTwoFamilyField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily();
            this.inNetworkTierTwoIndividualField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual();
            this.coinsuranceInNetworkTier1Field = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1();
            this.inNetworkTier1FamilyField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family();
            this.inNetworkTier1IndividualField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual();
            this.deductibleTypeField = new planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType deductibleType
        {
            get
            {
                return this.deductibleTypeField;
            }
            set
            {
                this.deductibleTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual inNetworkTier1Individual
        {
            get
            {
                return this.inNetworkTier1IndividualField;
            }
            set
            {
                this.inNetworkTier1IndividualField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family inNetworkTier1Family
        {
            get
            {
                return this.inNetworkTier1FamilyField;
            }
            set
            {
                this.inNetworkTier1FamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 coinsuranceInNetworkTier1
        {
            get
            {
                return this.coinsuranceInNetworkTier1Field;
            }
            set
            {
                this.coinsuranceInNetworkTier1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual inNetworkTierTwoIndividual
        {
            get
            {
                return this.inNetworkTierTwoIndividualField;
            }
            set
            {
                this.inNetworkTierTwoIndividualField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily inNetworkTierTwoFamily
        {
            get
            {
                return this.inNetworkTierTwoFamilyField;
            }
            set
            {
                this.inNetworkTierTwoFamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 coinsuranceInNetworkTier2
        {
            get
            {
                return this.coinsuranceInNetworkTier2Field;
            }
            set
            {
                this.coinsuranceInNetworkTier2Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual outOfNetworkIndividual
        {
            get
            {
                return this.outOfNetworkIndividualField;
            }
            set
            {
                this.outOfNetworkIndividualField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily outOfNetworkFamily
        {
            get
            {
                return this.outOfNetworkFamilyField;
            }
            set
            {
                this.outOfNetworkFamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual combinedInOrOutNetworkIndividual
        {
            get
            {
                return this.combinedInOrOutNetworkIndividualField;
            }
            set
            {
                this.combinedInOrOutNetworkIndividualField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily combinedInOrOutNetworkFamily
        {
            get
            {
                return this.combinedInOrOutNetworkFamilyField;
            }
            set
            {
                this.combinedInOrOutNetworkFamilyField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductible LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleDeductibleType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Individual LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTier1Family LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier1 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoIndividual LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleInNetworkTierTwoFamily LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCoinsuranceInNetworkTier2 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkIndividual LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleOutOfNetworkFamily LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkIndividual LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVariancePlanDeductibleCombinedInOrOutNetworkFamily LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit
    {

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType visitTypeField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 copayInNetworkTier1Field;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 copayInNetworkTier2Field;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork copayOutOfNetworkField;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 coInsuranceInNetworkTier1Field;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 coInsuranceInNetworkTier2Field;

        private planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork coInsuranceOutOfNetworkField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit()
        {
            this.coInsuranceOutOfNetworkField = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork();
            this.coInsuranceInNetworkTier2Field = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2();
            this.coInsuranceInNetworkTier1Field = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1();
            this.copayOutOfNetworkField = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork();
            this.copayInNetworkTier2Field = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2();
            this.copayInNetworkTier1Field = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1();
            this.visitTypeField = new planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType visitType
        {
            get
            {
                return this.visitTypeField;
            }
            set
            {
                this.visitTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 copayInNetworkTier1
        {
            get
            {
                return this.copayInNetworkTier1Field;
            }
            set
            {
                this.copayInNetworkTier1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 copayInNetworkTier2
        {
            get
            {
                return this.copayInNetworkTier2Field;
            }
            set
            {
                this.copayInNetworkTier2Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork copayOutOfNetwork
        {
            get
            {
                return this.copayOutOfNetworkField;
            }
            set
            {
                this.copayOutOfNetworkField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 coInsuranceInNetworkTier1
        {
            get
            {
                return this.coInsuranceInNetworkTier1Field;
            }
            set
            {
                this.coInsuranceInNetworkTier1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 coInsuranceInNetworkTier2
        {
            get
            {
                return this.coInsuranceInNetworkTier2Field;
            }
            set
            {
                this.coInsuranceInNetworkTier2Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork coInsuranceOutOfNetwork
        {
            get
            {
                return this.coInsuranceOutOfNetworkField;
            }
            set
            {
                this.coInsuranceOutOfNetworkField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitVisitType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier1 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayInNetworkTier2 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCopayOutOfNetwork LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier1 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceInNetworkTier2 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://vo.ffe.cms.hhs.gov")]
    public partial class planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork
    {

        private string cellValueField;

        private string cellLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string cellValue
        {
            get
            {
                return this.cellValueField;
            }
            set
            {
                this.cellValueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cellLocation
        {
            get
            {
                return this.cellLocationField;
            }
            set
            {
                this.cellLocationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static planBenefitTemplateVOPackagesPlansCostShareVarianceServiceVisitCoInsuranceOutOfNetwork LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}

